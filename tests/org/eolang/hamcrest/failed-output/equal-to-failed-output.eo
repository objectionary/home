# MIT License
#
# Copyright (c) 2020-2022 Graur Andrew
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.hamcrest.assert-that
+alias org.eolang.hamcrest.assert-twice-that
+home https://github.com/objectionary/eo-hamcrest
+junit
+package org.eolang.hamcrest.failed-output
+version 0.3.0

[] > delayed-calculation
  memory 0 > m
  [x] > inc
    seq > @
      m.write (m.plus x)
      m
  [] > suggestion
    assert-that > @
      inc
        inc
          inc
            inc
              1
      $.equal-to 5
  eq. > @
    suggestion
    "\nExpected: <5> equal to value\n     but: was <1>"

[] > equal-to-int-failed-output
  [] > suggestion
    assert-that > @
      4
      $.equal-to 9
  eq. > @
    suggestion
    "\nExpected: <9> equal to value\n     but: was <4>"

[] > equal-to-str-failed-output
  [] > suggestion
    assert-that > @
      "one"
      $.equal-to "two"
  eq. > @
    suggestion
    "\nExpected: <two> equal to value\n     but: was <one>"

[] > equal-to-float-failed-output
  [] > suggestion
    assert-that > @
      44.0
      $.equal-to 11.0
  eq. > @
    suggestion
    "\nExpected: <11.0> equal to value\n     but: was <44.0>"

[] > equal-to-assert-twice-that-failed-output
  nop > @
    [] > suggestion
      memory 0 > count
      [] > foo
        count.write (count.plus 1) > @
      assert-twice-that > @
        foo
        $.equal-to 3
    assert-that
      suggestion
      $.equal-to
        "\nExpected: <3> equal to value\n     but: was <2>"
