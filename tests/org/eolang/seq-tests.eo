# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EcounterPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.36.0

# Test.
[] > seq-single-dataization-float-less
  (memory 0.0).alloc > counter
  and. > @
    lt.
      float
        seq
          *
            counter.write (counter.as-float.plus 1.0)
            counter.as-float
      1.1
    counter.free

# Test.
[] > seq-single-dataization-float-greater
  (memory 0.0).alloc > counter
  and. > @
    gt.
      float
        seq
          *
            counter.write (counter.as-float.plus 1.0)
            counter.as-float
      0.9
    counter.free

# Test.
[] > seq-single-dataization-int-less
  (memory 0).alloc > counter
  and. > @
    lt.
      int
        seq
          *
            counter.write (counter.as-int.plus 1)
            counter.as-int
      2
    counter.free

# Test.
[] > seq-single-dataization-int-less-or-equal
  (memory 0).alloc > counter
  and. > @
    lte.
      int
        seq
          *
            counter.write
              counter.as-int.plus 1
            counter.as-int
      1
    counter.free

# This test should have acceptable time to pass.
[] > very-long-seq
  eq. > @
    TRUE
    seq
      *
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE
        TRUE

# Test.
[] > seq-single-dataization-int-equal-to-test
  (memory 0).alloc > x
  eq. > @
    seq
      *
        x.write 0
        x.write (x.as-int.plus 1)
        x.as-int
    1

# Test.
[] > seq-single-dataization-int-equal-to-cache-problem-test
  (memory 0).alloc > x
  eq. > @
    seq
      *
        at.
          * 0 1
          x.as-int
        x.write (x.as-int.plus 1)
        x.as-int
    1
