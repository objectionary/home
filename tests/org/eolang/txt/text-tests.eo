# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.hamcrest.assert-that
+alias org.eolang.txt.text
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo-strings
+package org.eolang.txt
+tests
+version 0.4.0

[] > text-left-trim-1
  assert-that > @
    left-trim.
      text
        "a b"
    $.equal-to "a b"

[] > text-left-trim-2
  assert-that > @
    left-trim.
      text
        "a b "
    $.equal-to "a b "

[] > text-left-trim-3
  assert-that > @
    left-trim.
      text
        " a b "
    $.equal-to "a b "

[] > text-left-trim-4
  assert-that > @
    left-trim.
      text
        " a b"
    $.equal-to "a b"

[] > text-left-trim-space
  assert-that > @
    left-trim.
      text
        " "
    $.equal-to ""

[] > text-left-trim-double-space
  assert-that > @
    left-trim.
      text
        "  "
    $.equal-to ""

[] > text-trimmed-1
  assert-that > @
    trimmed.
      text
        "a b"
    $.equal-to "a b"

[] > text-trimmed-2
  assert-that > @
    trimmed.
      text
        "a b "
    $.equal-to "a b"

[] > text-trimmed-3
  nop > @
    assert-that
      trimmed.
        text
          " a b "
      $.equal-to "a b"

[] > text-trimmed-4
  assert-that > @
    trimmed.
      text
        " a b"
    $.equal-to "a b"

[] > text-trimmed-5
  assert-that > @
    trimmed.
      text
        " ab"
    $.equal-to "ab"

[] > text-trimmed-empty-1
  assert-that > @
    trimmed.
      text
        ""
    $.equal-to ""

[] > text-trimmed-empty-2
  assert-that > @
    trimmed.
      text
        " "
    $.equal-to ""

[] > text-trimmed-empty-3
  nop > @
    assert-that
      trimmed.
        text
          "  "
      $.equal-to ""

[] > joins-tuple
  assert-that > @
    joined.
      text ".."
      * "foo" "друг" "bar"
    $.equal-to "foo..друг..bar"

[] > joins-tuple-2
  assert-that > @
    joined.
      text ", "
      * "Привет" "мир!"
    $.equal-to "Привет, мир!"

[] > joins-tuple-3
  assert-that > @
    joined.
      text ""
      *
    $.equal-to ""

[] > joins-tuple-4
  assert-that > @
    joined.
      text ""
      * "foo" "друг" "bar"
    $.equal-to "fooдругbar"

[] > nested-joins
  assert-that > @
    joined.
      text
        joined.
          text "&"
          * " " " "
      * "start" "end"
    $.equal-to "start & end"

[] > text-lower-case-1
  assert-that > @
    (text "HeLlO !").low-cased
    $.equal-to "hello !"

[] > text-lower-case-2
  assert-that > @
    (text "HEL 3").low-cased
    $.equal-to "hel 3"

[] > text-lower-case-3
  assert-that > @
    (text "HeL世o").low-cased
    $.equal-to "hel世o"

[] > no-changes-lower-case
  assert-that > @
    (text "chng").low-cased
    $.equal-to "chng"

[] > text-upper-case-1
  assert-that > @
    (text "HeLlO !").up-cased
    $.equal-to "HELLO !"

[] > text-upper-case-2
  assert-that > @
    (text "hel 3").up-cased
    $.equal-to "HEL 3"

[] > text-upper-case-3
  assert-that > @
    (text "HelL世o").up-cased
    $.equal-to "HELL世O"

[] > no-changes-upper-case
  assert-that > @
    (text "CHANGE").up-cased
    $.equal-to "CHANGE"

[] > text-contains
  assert-that > @
    (text "ab").contains "ab"
    $.equal-to TRUE

[] > text-contains-2
  assert-that > @
    (text "b").contains "b "
    $.equal-to FALSE

[] > text-contains-3
  assert-that > @
    (text "ab").contains "a"
    $.equal-to TRUE

[] > text-not-contains
  assert-that > @
    (text "1").contains "12"
    $.equal-to FALSE

[] > text-contains-unicode
  assert-that > @
    (text "й").contains "й"
    $.equal-to TRUE

[] > text-starts-with
  assert-that > @
    (text "some text here").starts-with "me te"
    $.equal-to FALSE

[] > text-starts-with-2
  assert-that > @
    (text "some text here").starts-with "some "
    $.equal-to TRUE

[] > text-starts-with-3
  assert-that > @
    (text "some text here").starts-with "some  "
    $.equal-to FALSE

[] > text-starts-with-4
  assert-that > @
    (text "qwe世rty text here").starts-with "qwe世rty te"
    $.equal-to TRUE

[] > text-starts-with-5
  assert-that > @
    (text "qwe世rty text here").starts-with ""
    $.equal-to TRUE

[] > text-ends-with
  assert-that > @
    (text "some text here").ends-with "me te"
    $.equal-to FALSE

[] > text-ends-with-2
  assert-that > @
    (text "some text here").ends-with " here"
    $.equal-to TRUE

[] > text-ends-with-3
  assert-that > @
    (text "some text here").ends-with "  here"
    $.equal-to FALSE

[] > text-index-of
  assert-that > @
    (text "ab").index-of "ab"
    $.equal-to 0

[] > text-index-of-2
  nop > @
    assert-that
      (text "ab").index-of "abc"
      $.equal-to -1

[] > text-index-of-3
  nop > @
    assert-that
      (text "ab").index-of "b"
      $.equal-to 1

[] > text-index-of-4
  assert-that > @
    (text "a").index-of "a"
    $.equal-to 0

[] > text-index-of-5
  assert-that > @
    (text "a").index-of "b"
    $.equal-to -1

[] > text-check-if-starts-from-index
  assert-that > @
    check-if-starts-from-index.
      index-of.
        text
      "abc"
      "bc"
      1
    $.equal-to TRUE

[] > text-check-if-starts-from-index-2
  assert-that > @
    check-if-starts-from-index.
      index-of.
        text
      "a"
      "a"
      0
    $.equal-to TRUE

[] > text-check-if-starts-from-index-3
  assert-that > @
    check-if-starts-from-index.
      index-of.
        text
      "abc"
      "bcd"
      1
    $.equal-to FALSE

[] > text-last-index-of
  assert-that > @
    (text "4 2").last-index-of "2"
    $.equal-to 2

[] > text-last-index-of-2
  assert-that > @
    (text "here").last-index-of " here"
    $.equal-to -1

[] > text-last-index-of-3
  assert-that > @
    (text "ab abc").last-index-of "ab"
    $.equal-to 3

[] > text-last-index-of-4
  assert-that > @
    (text "Hello").last-index-of "Hello"
    $.equal-to 0

[] > empty-text-last-index-of
  assert-that > @
    (text "").last-index-of "abc"
    $.equal-to -1

[] > unicode-text-last-index-of
  assert-that > @
    (text "a世").last-index-of "世"
    $.equal-to 1

[] > at-returns-one-character
  assert-that > @
    length.
      at.
        text
          "abc"
        0
    $.equal-to 1

[] > at-returns-desired-character
  assert-that > @
    at.
      text
        "Привет, 世界"
      8
    $.equal-to "世"

[] > text-replaced
  assert-that > @
    replaced.
      text
        "abacaba"
      "aba"
      "c"
    $.equal-to "ccc"

[] > text-replaced-2
  assert-that > @
    replaced.
      text
        "abacaba"
      "w"
      "c"
    $.equal-to "abacaba"

[] > text-replaced-russian
  assert-that > @
    replaced.
      text
        "Привет, мир!"
      "Привет, мир!"
      "Привет, мир!"
    $.equal-to "Привет, мир!"

[] > text-replaced-russian-2
  assert-that > @
    replaced.
      text
        "Hello, мир!"
      "Hello"
      "Привет"
    $.equal-to "Привет, мир!"

[] > text-replaced-3
  assert-that > @
    replaced.
      text
        "$A"
      "\\$"
      "G"
    $.equal-to "GA"

[] > text-replaced-4
  assert-that > @
    replaced.
      text
        "$AB"
      "\\$A"
      "G"
    $.equal-to "GB"

[] > text-replaced-5
  assert-that > @
    replaced.
      text "q$0werty"
      "\\$0"
      "GROUP0"
    $.equal-to "qGROUP0werty"

[] > get-int
  assert-that > @
    as-int.
      text
        "123"
    $.equal-to 123

[] > get-negative-int
  assert-that > @
    as-int.
      text
        "-456"
    $.equal-to -456

[] > get-float
  assert-that > @
    as-float.
      text
        "123.456"
    $.equal-to 123.456

[] > get-float-2
  assert-that > @
    as-float.
      text
        "0.0"
    $.equal-to 0.0

[] > get-negative-float
  assert-that > @
    as-float.
      text
        "-0.01"
    $.equal-to -0.01

[] > compare-similar-strings
  assert-that > @
    compare.
      text
        "aB"
      "aB"
    $.equal-to 0

[] > compare-strings
  assert-that > @
    lt.
      0
      compare.
        text
          "ab"
        "aB"
    $.equal-to TRUE

[] > compare-strings-2
  assert-that > @
    gt.
      0
      compare.
        text
          "A"
        "a"
    $.equal-to TRUE

[] > compare-strings-with-different-length
  assert-that > @
    gt.
      0
      compare.
        text
          "a"
        "aa"
    $.equal-to TRUE

[] > compare-strings-with-different-length-2
  assert-that > @
    gt.
      0
      compare.
        text
          "bb"
        "b"
    $.equal-to FALSE

[] > compare-strings-with-unicode
  assert-that > @
    gt.
      0
      compare.
        text
          "y"
        "漢"
    $.equal-to TRUE

[] > check-is-alphabetic
  assert-that > @
    is-alphabetic.
      text
        "eEo"
    $.equal-to TRUE

[] > check-is-alphabetic-2
  assert-that > @
    is-alphabetic.
      text
        "ab3d"
    $.equal-to TRUE

[] > check-is-alphabetic-3
  assert-that > @
    is-alphabetic.
      text
        "-w-"
    $.equal-to FALSE

[] > check-is-alpha
  assert-that > @
    is-alpha.
      text
        "eEo"
    $.equal-to TRUE

[] > check-is-alpha-2
  assert-that > @
    is-alpha.
      text
        "ab3d"
    $.equal-to FALSE

[] > check-is-alpha-3
  assert-that > @
    is-alpha.
      text
        "-w-"
    $.equal-to FALSE

[] > check-is-ascii
  assert-that > @
    is-ascii.
      text
        "H311oW"
    $.equal-to TRUE

[] > check-is-ascii2
  assert-that > @
    is-ascii.
      text
        "🌵"
    $.equal-to FALSE

[] > check-is-ascii3
  assert-that > @
    is-ascii.
      text
        "123"
    $.equal-to TRUE

[] > split-text
  assert-that > @
    split.
      text
        "a b c"
      " "
    $.equal-to
      list
        * "a" "b" "c"

[] > split-text-2
  assert-that > @
    split.
      text
        "a b c"
      ", "
    $.equal-to
      list
        * "a b c"

[] > split-text-3
  assert-that > @
    split.
      text
        "a, b, c."
      ", "
    $.equal-to
      list
        * "a" "b" "c."

[] > strings-chained
  assert-that > @
    chained.
      text
        "123"
      "45 "
    $.equal-to "12345 "

[] > strings-chained-2
  assert-that > @
    chained.
      text
        ""
      "45 "
    $.equal-to "45 "

[] > strings-chained-3
  assert-that > @
    chained.
      text
        ""
      ""
    $.equal-to ""

[] > strings-chained-4
  assert-that > @
    chained.
      text
        "漢a"
      "漢字漢"
    $.equal-to "漢a漢字漢"

[] > one-strings-chained
  assert-that > @
    chained.
      text
        "a"
    $.equal-to "a"

[] > multiple-strings-chained
  assert-that > @
    chained.
      text
        "a"
      "b"
      "c"
    $.equal-to "abc"

[] > replace-returns-text
  assert-that > @
    at.
      replaced.
        text
          "abacaba"
        "aba"
        "漢"
      0
    $.equal-to "漢"

[] > chained-returns-text
  assert-that > @
    at.
      chained.
        text
          "ab"
        "漢"
      2
    $.equal-to "漢"

[] > slice-returns-text
  assert-that > @
    at.
      slice.
        text
          "漢b"
        0
        2
      0
    $.equal-to "漢"

[] > at-returns-text
  assert-that > @
    at.
      at.
        text
          "漢b"
        0
      0
    $.equal-to "漢"

[] > upper-case-returns-text
  assert-that > @
    at.
      (text "HeLlO!").up-cased
      1
    $.equal-to "E"

[] > lower-case-returns-text
  assert-that > @
    at.
      (text "hELlO!").low-cased
      1
    $.equal-to "e"

[] > trims-returns-text
  assert-that > @
    at.
      trimmed.
        text "漢 "
      0
    $.equal-to "漢"

[] > simple-contains-string
  assert-that > @
    contains.
      text "Привет, 世界"
      "世"
    $.equal-to TRUE
    "constains-string"

[] > check-all-contains-string
  assert-that > @
    and.
      contains.
        text "世界世界世界世界世界世界世界世界"
        "界"
      contains.
        text "世界世界世界世界世界世界й世界世界"
        "й"
    $.equal-to TRUE
    "constains-all-of-string"

[] > repeated-empty
  assert-that > @
    repeated.
      text
        ""
      3
    $.equal-to ""

[] > repeated-zero
  assert-that > @
    repeated.
      text
        "abc"
      0
    $.equal-to ""

[] > repeated-one
  assert-that > @
    repeated.
      text
        "abc"
      1
    $.equal-to "abc"

[] > repeated-many-times
  assert-that > @
    repeated.
      text
        "abc"
      3
    $.equal-to "abcabcabc"

[] > repeated-unicode
  assert-that > @
    repeated.
      text
        "漢"
      3
    $.equal-to "漢漢漢"
