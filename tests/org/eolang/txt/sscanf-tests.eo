# The MIT License (MIT)
#
# Copyright (c) 2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.hamcrest.assert-that
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.sscanf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo-strings
+package org.eolang.txt
+tests
+version 0.4.0

[] > sscanf-with-string
  assert-that > @
    at.
      sscanf
        "%s"
        "hello"
      0
    $.equal-to "hello"

[] > sscanf-with-int
  assert-that > @
    at.
      sscanf
        "%d"
        "33"
      0
    $.equal-to 33

[] > sscanf-with-float
  assert-that > @
    at.
      sscanf
        "%f"
        "0.24"
      0
    $.equal-to 0.24

[] > sscanf-with-bool
  assert-that > @
    at.
      sscanf
        "%b"
        "true"
      0
    $.equal-to TRUE

[] > sscanf-with-error
  nop > @
    assert-that
      try
        []
          sscanf > @
            "%l"
            "error"
        [e]
          e > @
        nop
      $.equal-to "Can't recognize format pattern: %l"

[] > sscanf-with-string-int-float
  assert-that > @
    sscanf
      "%s %d %f"
      "hello 33 0.24"
    $.equal-to
      list
        * "hello" 33 0.24

[] > sscanf-with-string-with-ending
  assert-that > @
    at.
      sscanf
        "%s!"
        "hello!"
      0
    $.equal-to "hello"

[] > sscanf-with-complex-string
  assert-that > @
    at.
      sscanf
        "some%sstring"
        "someteststring"
      0
    $.equal-to "test"

[] > sscanf-with-complex-int
  assert-that > @
    at.
      sscanf
        "!%d!"
        "!734987259!"
      0
    $.equal-to 734987259

[] > sscanf-with-complex-float
  assert-that > @
    at.
      sscanf
        "this will be=%f"
        "this will be=1991.01"
      0
    $.equal-to 1991.01

[] > sscanf-with-complex-bool
  assert-that > @
    sscanf
      "%b or maybe %b!"
      "true or maybe false!"
    $.equal-to
      list
        *
          TRUE
          FALSE

[] > sscanf-with-sprintf
  assert-that > @
    sscanf
      "%s is about %d?"
      sprintf
        "%s is about %d?"
        "This"
        8
    $.equal-to
      list
        *
          "This"
          8

[] > sscanf-complex-case
  assert-that > @
    sscanf
      "Im%d %s old and this is%b! Let's calculate %f + %f= %f"
      "Im18 years old and this istrue! Let's calculate 99999999.99 + 0.01= 100000000.0"
    $.equal-to
      list
        *
          18
          "years"
          TRUE
          99999999.99
          0.01
          100000000.0
