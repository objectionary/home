# The MIT License (MIT)
#
# Copyright (c) 2021-2022 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.hamcrest.assert-that
+alias org.eolang.io.stdout
+alias org.eolang.math.number
+alias org.eolang.txt.sprintf
+alias org.eolang.txt.sscanf
+alias org.eolang.txt.text
+home https://github.com/objectionary/eo-collections
+junit
+package org.eolang.collections
+version 0.0.8

# check that list.is-empty works properly
[] > should-not-be-empty
  * > xs
    1
    2
  assert-that > @
    (list xs).is-empty.not
    $.equal-to TRUE

# check that list.is-empty works properly
[] > should-be-empty
  * > xs
  assert-that > @
    (list xs).is-empty
    $.equal-to TRUE

# list of objects
[] > should-not-be-empty-with-3-objects
  [x] > a-1
    (number x).as-int > @
  [x] > a-2
    x.as-byte > @
  [x] > a-3
    (number x).as-string > @
  * > xs
    a-1
    a-2
    a-3
  assert-that > @
    (list xs).is-empty.not
    $.equal-to TRUE

# list with anonymous object
[] > should-not-be-empty-with-1-anon-object
  * > xs
    [f]
      (number f).as-int > @
  assert-that > @
    (list xs).is-empty.not
    $.equal-to TRUE

# list with anonymous one-line-object
[] > should-not-be-empty-with-1-anon-object-one-liner
  * > xs
    [f] ((number f).as-int > @)
  assert-that > @
    (list xs).is-empty.not
    $.equal-to TRUE

# reduce with index test
[] > reduce-with-index-test
  * 2 2 > src
  assert-that > @
    reducedi.
      list
        * 1 1
      0
      [a i x]
        plus. > @
          x
          a.plus
            src.at i
    $.equal-to 6

[] > reducedi-long-int-array
  assert-that > @
    reducedi.
      list
        * 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
      0
      [a i x]
        plus. > @
          x
          a
    $.equal-to 1

[] > reducedi-bools-array
  assert-that > @
    reducedi.
      list
        * TRUE TRUE FALSE
      TRUE
      [a i x]
        and. > @
          x
          a
    $.equal-to FALSE

[] > reducedi-nested-functions
  [] > a
    10 > @
  [] > b
    500 > @
  assert-that > @
    reducedi.
      list
        * a b
      0
      [acc i x]
        check x > @
        [el] > check
          if. > @
            x.lt 100
            acc.plus x
            acc.minus x
    $.equal-to
      plus.
        0.minus 500
        10

# reduce without index test
[] > reduce-without-index-test
  assert-that > @
    reduced.
      list
        * 1 2 3 4
      -1
      [a x]
        times. > @
          a
          x
    $.equal-to -24

[] > mappedi-should-works
  assert-that > @
    mappedi.
      list
        * 1 2 3 4
      [x i]
        x.times 2 > @
    $.equal-to
      list
        * 2 4 6 8

# this test performs mapping of list using the index for it
[] > mappedi-index-can-be-accessed
  [numbers...] > multipliedByNaturalSequence
    mappedi. > @
      list numbers
      [current index]
        times. > @
          (sscanf "%d" current).at 0
          index.plus 1
  multipliedByNaturalSequence "1" "2" "3" > mulSeq
  assert-that > @
    sprintf "%d %d %d" (mulSeq.at 0) (mulSeq.at 1) (mulSeq.at 2)
    $.equal-to
      sprintf "%d %d %d" 1 4 9

[] > simple-mapping-int-to-string
  assert-that > @
    length.
      mapped.
        list
          * 1 2 3
        [i]
          (number i).as-string > @
    $.equal-to 3

[] > using-mapped-as-object
  assert-that > @
    (text " ").joined
      mapped.
        list
          * 1 2
        [i]
          (number i).as-string > @
    $.equal-to "1 2"

# if mapped does mutate lists, then this test would fail
# because of the absence of the as-int attribute
# that is caused by mutation of the original string list
# to an int list
[] > mapped-does-dot-mutate-array
  [numbers...] > squares
    mapped. > @
      list numbers
      [current]
        pow. > @
          number
            (sscanf "%d" current).at 0
          2
  squares "1" "2" "3" > sq
  assert-that > @
    sprintf "%d %d %d" (sq.at 0) (sq.at 1) (sq.at 2)
    $.equal-to
      sprintf "%d %d %d" 1 4 9

[] > iterates-with-each
  list
    *
      "one"
      "two"
      "three"
  .each > @
    [i] (stdout i > @)

[] > list-withouti
  assert-that > @
    withouti.
      list
        * 1 2 3
      1
    $.equal-to
      list
        * 1 3

[] > list-withouti-complex-case
  [a] > foo
    seq > @
      withouti. > t
        list a
        0
      t
  assert-that > @
    foo
      * 1 "text" "f"
    $.equal-to
      list
        * "text" "f"

[] > list-withouti-nested-array
  * 3 2 1 > nested
  assert-that > @
    withouti.
      list
        * "smthg" 27 nested
      2
    $.equal-to
      list
        * "smthg" 27

# array equal to another array
[] > list-equal-to-another-array
  assert-that > @
    *
      1
      "str"
      "\n"
      22.0
      "друг".as-bytes
      TRUE
    $.is
      $.equal-to
        list
          *
            1
            "str"
            "\n"
            (number (11.times 2)).as-float
            D0-B4-D1-80-D1-83-D0-B3
            FALSE.not

# array not equal to another object by length
[] > list-not-equal-to-another-array-by-length
  assert-that > @
    * 1 2 3
    $.is
      $.not
        $.equal-to
          list
            * 1 2 3 4

# check that varargs eq works
[] > varargs-eq-should-works
  [args...] > a
  [args...] > b
  assert-that > @
    args.
      a
        (number 13).as-float
        "\t"
        "bbt"
    $.equal-to
      list
        args.
          b
            (number 13).as-float
            "\t"
            "bbt"

[] > nested-array-eq-should-works
  list (* 1 "2" 3.0) > a
  list (* 1 "2" ((number 3).as-float)) > b
  assert-that > @
    list (* "w" a)
    $.equal-to
      list
        * "w" b

# two different arrays not equal
[] > two-different-arrays-not-equal
  assert-that > @
    * 1 2 3
    $.not
      $.equal-to
        list
          * 1 5 "text"

#two different nested arrays not eq
[] > nested-array-not-eq-should-works
  list (* 5 "\07" "18") > a
  list (* 5 "neq" ((number 18).as-string)) > b
  assert-that > @
    list (* "not eq" a)
    $.not
      $.equal-to
        list
          * "not eq" b

# check that varargs not eq works
[] > varargs-not-eq-should-works
  [args...] > a
  [args...] > b
  assert-that > @
    args.
      a 1 2 3
    $.not
      $.equal-to
        list
          args.
            b 1 2 "fail"

[] > reduce-with-memory-test
  eq. > @
    foo
    7

  [] > foo
    reduced. > res
      list
        * 0
      *
      [acc x]
        acc.with (memory x) > @
    seq > @
      (res.at 0).write 7
      res.at 0

[] > reduce-with-memory-test-2
  eq. > @
    foo
    7

  [] > foo
    with. > res
      *
      memory 0
    seq > @
      (res.at 0).write 7
      res.at 0

[] > is-index-of-1
  list > lst
    * 1 2 3
  assert-that > @
    lst.index-of 2
    $.equal-to 1

[] > is-index-of-2
  list > lst
    * "qwerty" 2 3
  assert-that > @
    lst.index-of 2
    $.equal-to 1

[] > is-index-of-3
  list > lst
    * -1 2 -1
  assert-that > @
    lst.index-of -1
    $.equal-to 0

[] > is-not-index-of
  list > lst
    * "qwerty" 2 3
  assert-that > @
    lst.index-of 7
    $.equal-to -1

[] > is-index-of-first-index
  list > lst
    * "qwerty" "asdfgh" 3 "qwerty"
  assert-that > @
    lst.index-of "qwerty"
    $.equal-to 0

[] > last-index-of-1
  list > lst
    * "qwerty" 2 3
  assert-that > @
    lst.last-index-of 2
    $.equal-to 1

[] > last-index-of-repeated
  list > lst
    * 24 42 24
  assert-that > @
    lst.last-index-of 24
    $.equal-to 2

[] > last-index-of-not-found
  list > lst
    * 1 2 3
  assert-that > @
    lst.last-index-of 0
    $.equal-to -1

[] > last-index-of-empty
  list > lst
    *
  assert-that > @
    lst.last-index-of "abacaba"
    $.equal-to -1

[] > last-index-of-unicode
  list > lst
    * "Hi" "Привет" "Hola" "Guten Tag" "こんにちわ"
  assert-that > @
    lst.last-index-of "Привет"
    $.equal-to 1

[] > contains-1
  list > lst
    * "qwerty" "asdfgh" 3 "qwerty"
  assert-that > @
    lst.contains "qwerty"
    $.equal-to TRUE

[] > contains-2
  list > lst
    * "qwerty" "asdfgh" 3 "qwerty"
  assert-that > @
    lst.contains 3
    $.equal-to TRUE

[] > contains-3
  list > lst
    * "Привет" "asdfgh" 3 "qwerty"
  assert-that > @
    lst.contains "Привет"
    $.equal-to TRUE

[] > contains-4
  list > lst
    * "qwerty" "asdfgh" 3 "qwerty"
  assert-that > @
    lst.contains "Привет"
    $.equal-to FALSE

[] > list-with-withouti
  list (* 1 2) > list1
  withouti. > list2
    with.
      list1
      3
    0
  assert-that > @
    list2.at 0
    $.equal-to 2

[] > list-without-1
  assert-that > @
    without.
      list
        * 1 2 1 2 1 5
      2
    $.equal-to
      list
        * 1 1 1 5

[] > list-without-2
  assert-that > @
    without.
      list
        *
          "äääää"
          5
          "äääää"
          "äääää"
          6
          "bbb"
      "äääää"
    $.equal-to
      list
        *
          5
          6
          "bbb"

[] > concat-returns-list-1
  list (* 0 1) > list1
  list (* 2 3) > list2
  withouti. > list3
    concat.
      list1
      list2
    0
  assert-that > @
    list3.at 0
    $.equal-to 1

[] > concat-returns-list-2
  assert-that > @
    contains.
      concat.
        list
          * 0 1
        list
          * 2 3
      3
    $.equal-to
      TRUE

[] > nested-reduced-with-literal
  reduced. > res!
    list
      * 1
    *
      *
    [a x]
      reduced. > @
        list
          *
            *
        *
        [aaa xxx]
          aaa.with xxx > @
  assert-that > @
    (res.at 0).length
    $.equal-to 0

[] > nested-reduced-without-literal
  reduced. > res!
    list
      * 1
    *
      *
    [a x]
      reduced. > @
        list
          a
        *
        [aaa xxx]
          aaa.with xxx > @
  assert-that > @
    (res.at 0).length
    $.equal-to 0

[] > list-sorted
  sorted. > res!
    list
      * 4 6 3 5
  assert-that > @
    res
    $.equal-to
      list
        * 3 4 5 6

[] > list-sorted-2
  sorted. > res!
    list
      * 5 3 6
  assert-that > @
    res
    $.equal-to
      list
        * 3 5 6

[] > reversed-list-sorted
  sorted. > res!
    list
      * 3 2 1
  assert-that > @
    res
    $.equal-to
      list
        * 1 2 3

[] > reversed-list-sorted-with-zero
  nop > @
    sorted. > res!
      list
        * 3 2 0
    assert-that
      res
      $.equal-to
        list
          * 0 2 3

[] > similar-elements-list-sorted
  sorted. > res!
    list
      * 1 1 1
  assert-that > @
    res
    $.equal-to
      list
        * 1 1 1

[] > one-element-list-sorted
  sorted. > res!
    list
      * 42
  assert-that > @
    res
    $.equal-to
      list
        * 42

[] > empty-list-sorted
  sorted. > res!
    list
      *
  assert-that > @
    res
    $.equal-to
      list
        *

[] > negative-numbers-list-sorted
  sorted. > res!
    list
      * 1 2 -3 -4
  assert-that > @
    res
    $.equal-to
      list
        * -4 -3 1 2

[] > complex-objects-list-compairing
  list > res!
    *
      * 0 1
      * 4 0
      * 7 3
  assert-that > @
    res
    $.equal-to
      list
        *
          list (* 0 1)
          list (* 4 0)
          list (* 7 3)

  [pair] > comparable-pair
    pair > @

    [x] > lt
      lt. > @
        ^.at 0
        x.at 0

[] > complex-objects-list-sorted
  sorted. > res!
    list
      *
        comparable-pair (* 7 3)
        comparable-pair (* 1 1)
        comparable-pair (* 4 0)
  assert-that > @
    res
    $.equal-to
      list
        *
          list (* 1 1)
          list (* 4 0)
          list (* 7 3)

  [pair] > comparable-pair
    pair > @

    [x] > lt
      lt. > @
        ^.at 0
        x.at 0

[] > complex-objects-list-sorted-with-zero
  nop > @
    sorted. > res!
      list
        *
          comparable-pair (* 7 3)
          comparable-pair (* 0 1)
          comparable-pair (* 4 0)
    assert-that
      res
      $.equal-to
        list
          *
            list (* 0 1)
            list (* 4 0)
            list (* 7 3)

  [pair] > comparable-pair
    pair > @

    [x] > lt
      lt. > @
        ^.at 0
        x.at 0

# This code should prints "0 1"
[] > reduced-printing-test
  reduced. > @
    list
      * 0 1
    TRUE
    [a x]
      seq > @
        stdout
          sprintf
            "%d\n"
            x

[] > filteredi-test-1
  assert-that > @
    eq.
      filteredi.
        list
          * 3 1 4 2 5
        [v i]
          v.lt 3 > @
      list
        * 1 2
    $.equal-to TRUE

[] > filteredi-test-2
  assert-that > @
    eq.
      filteredi.
        list
          * "Hello" "Name" "EO" "List"
        [v i]
          gt. > @
            length.
              v
            4
      list
        * "Hello"
    $.equal-to TRUE

[] > filteredi-test-3
  assert-that > @
    eq.
      filteredi.
        list
          *
        [v i]
          v.lt 3 > @
      list
        *
    $.equal-to TRUE

[] > filteredi-test-4
  assert-that > @
    eq.
      filteredi.
        list
          * 3 1 4
        [v i]
          i.gt 0 > @
      list
        * 1 4
    $.equal-to TRUE

[] > filteredi-test-5
  assert-that > @
    eq.
      filteredi.
        list
          * TRUE FALSE TRUE
        [v i]
          v.eq FALSE > @
      list
        * FALSE
    $.equal-to TRUE

# This code should prints "1 2"
[] > filteredi-printing-test
  seq > @
    filteredi.
      list
        * 1 2 3
      [v i]
        seq > @
          if.
            v.lt 3
            stdout
              sprintf
                "%d\n"
                v
            FALSE
    TRUE

[] > filtered-test-1
  assert-that > @
    eq.
      filtered.
        list
          * 3 1 4 2 5
        [v]
          v.gt 2 > @
      list
        * 3 4 5
    $.equal-to TRUE

[] > filtered-test-2
  assert-that > @
    eq.
      filtered.
        list
          * TRUE FALSE TRUE
        [v]
          v.eq FALSE > @
      list
        * FALSE
    $.equal-to TRUE

# This code should prints "1 2"
[] > filtered-printing-test
  seq > @
    filtered.
      list
        * 1 2 3
      [v]
        seq > @
          if.
            v.lt 3
            stdout
              sprintf
                "%d\n"
                v
            FALSE
    TRUE

[] > list-inflated-zero-steps
  inflated. > res!
    list
      *
    [a i]
      if. > @
        i.gt -1
        *
        * i
  assert-that > @
    res.length
    $.equal-to 0

[] > list-inflated-1
  inflated. > res!
    list
      *
    [a i]
      if. > @
        i.gt 4
        *
        * i
  assert-that > @
    res.length
    $.equal-to 5

[] > list-inflated-2
  inflated. > res!
    list
      *
    [a i]
      if. > @
        eq.
          a.length
          1
        *
        * i
  assert-that > @
    res.length
    $.equal-to 1

[] > list-inflated-3
  inflated. > res!
    list
      *
    [a i]
      if. > @
        eq.
          a.length
          1
        * i
        *
  assert-that > @
    res.length
    $.equal-to 0

[] > list-inflated-4
  inflated. > res!
    list
      * 1
    [a i]
      if. > @
        eq.
          a.length
          2
        *
        * i
  assert-that > @
    res.length
    $.equal-to 2

[] > list-inflated-5
  inflated. > res!
    list
      * 2
    [a i]
      if. > @
        eq.
          a.length
          5
        *
        * i i
  assert-that > @
    res
    $.equal-to
      list
        * 2 0 0 1 1

[] > inflated-returns-list
  inflated. > res!
    list
      * 2
    [a i]
      if. > @
        eq.
          a.length
          5
        *
        * i i
  assert-that > @
    is-empty.
      res
    $.equal-to FALSE

[] > simple-head
  assert-that > @
    head.
      list
        * 1 2 3 4 5
      1
    $.equal-to
      list
        * 1

[] > list-head-with-zero-index
  assert-that > @
    head.
      list
        * 1 2 3
      0
    $.equal-to
      list *

[] > list-head-with-length-index
  assert-that > @
    head.
      list
        * 1 2 3
      3
    $.equal-to
      list
        * 1 2 3

[] > complex-head
  assert-that > @
    head.
      list
        * "foo" 2.2 00-01 "bar"
      2
    $.equal-to
      list
        * "foo" 2.2
[] > simple-tail
  assert-that > @
    tail.
      list
        * 1 2 3 4 5
      2
    $.equal-to
      list
        * 4 5

[] > zero-index-in-tail
  assert-that > @
    tail.
      list
        * 1 2 3 4 5
      0
    $.equal-to
      list *

[] > large-index-in-tail
  assert-that > @
    tail.
      list
        * 1 2 3 4 5
      10
    $.equal-to
      list
        * 1 2 3 4 5

[] > list-gt-1
  nop > @
    assert-that
      qt.
        list
          * 3 2 1
        list
          * 2 1 0
      $.equal-to TRUE

[] > list-gt-2
  nop > @
    assert-that
      gt.
        list
          * 3 2 1
        list
          * 2 10 100
      $.equal-to TRUE

[] > list-gt-3
  nop > @
    assert-that
      gt.
        list
          * 1 2 3
        list
          * 1 2 3
      $.equal-to FALSE

[] > list-gt-4
  nop > @
    assert-that
      gt.
        list
          * 3 4 2
        list
          * 3 4
      $.equal-to TRUE

[] > list-gt-5
  nop > @
    assert-that
      gt.
        list
          * 0 99 99
        list
          * 1 0
      $.equal-to FALSE

[] > list-gte-1
  nop > @
    assert-that
      gte.
        list
          * 1 2 3
        list
          * 1 2 3
      $.equal-to TRUE

[] > list-gte-2
  nop > @
    assert-that
      gte.
        list
          * 3 4 2
        list
          * 3 4
      $.equal-to TRUE

[] > list-gte-3
  nop > @
    assert-that
      gte.
        list
          * 0 99 99
        list
          * 1 0
      $.equal-to FALSE

[] > list-lt-1
  nop > @
    assert-that
      lt.
        list
          * 3 2 1
        list
          * 2 1 0
      $.equal-to FALSE

[] > list-lt-2
  nop > @
    assert-that
      lt.
        list
          * 3 2 1
        list
          * 2 10 100
      $.equal-to FALSE

[] > list-lt-3
  nop > @
    assert-that
      lt.
        list
          * 1 2 3
        list
          * 1 2 3
      $.equal-to FALSE

[] > list-lt-4
  nop > @
    assert-that
      lt.
        list
          * 3 4
        list
          * 3 4 2
      $.equal-to TRUE

[] > list-lt-5
  nop > @
    assert-that
      lt.
        list
          * 0 99 99
        list
          * 1 0
      $.equal-to TRUE

[] > list-lte-1
  nop > @
    assert-that
      lte.
        list
          * 1 2 3
        list
          * 1 2 3
      $.equal-to TRUE

[] > list-lte-2
  nop > @
    assert-that
      lte.
        list
          * 3 4 2
        list
          * 3 4
      $.equal-to FALSE

[] > list-lte-3
  nop > @
    assert-that
      lte.
        list
          * 0 99 99
        list
          * 1 0
      $.equal-to TRUE

[] > list-gt-empty
  nop > @
    assert-that
      gt.
        list
          *
        list
          *
      $.equal-to FALSE

[] > list-gte-empty
  nop > @
    assert-that
      gte.
        list
          *
        list
          *
      $.equal-to TRUE

[] > list-lt-empty
  nop > @
    assert-that
      lt.
        list
          *
        list
          *
      $.equal-to FALSE

[] > list-lte-empty
  nop > @
    assert-that
      lte.
        list
          *
        list
          *
      $.equal-to TRUE
