# MIT License
#
# Copyright (c) 2022 Eugene Darashkevich
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.collections.multimap
+alias org.eolang.hamcrest.assert-that
+home https://github.com/objectionary/eo-collections
+junit
+package org.eolang.collections
+version 0.0.6

[] > rebuild-do-not-crush
  * 1 2 > harr
  * 3 4 > arr
  multimap.rebuild harr arr > res
  assert-that > @
    res.length
    $.equal-to 2

[] > rebuild-correct
  * 1 0 3 0 > harr
  * (* 1 "a") (* 4 "b") (* "c" 5) (* 8 7) > arr
  multimap.rebuild harr arr > res
  assert-that > @
    * (((res.at 0).at 0).at 0) (((res.at 3).at 0).at 1)
    $.equal-to
      list
        * 4 5

[] > multimap-pairs-to-hash-test
  * (* 2 3) (* 3 4) > arr!
  multimap.pairs-to-hash arr > tarr!
  assert-that > @
    * (tarr.length) (tarr.at 0) (tarr.at 1)
    $.equal-to
      list
        * 2 2 3

[] > multimap-string-to-hash
  multimap * > mp!
  * (* "key" 3) > arr!
  mp.pairs-to-hash arr > tarr!
  assert-that > @
    tarr.at 0
    $.equal-to 29791

[] > multimap-concat-all-arrays-test
  multimap * > mp!
  * (* 1 2) (* 8) (*) > arr!
  mp.concat-all-arrays arr > res!
  assert-that > @
    * (res.length) (res.at 2)
    $.equal-to
      list
        * 3 8

[] > multimap-with-do-not-crashed
  multimap * > mp!
  mp.with 1 2 > mp2!
  assert-that > @
    mp2.size
    $.equal-to 1

[] > multimap-with-do-not-crashed-2
  multimap * > mp!
  (multimap (* (* (* 1 2)))).with 3 4 > mp2!
  assert-that > @
    mp2.size
    $.equal-to 2

[] > multimap-find-in-list-works
  multimap * > mp!
  * (* 1 2) (* "abc" "bca") (* "a" 42) > lst!
  mp.find-in-list "abc" lst > res!
  mp.find-in-list "c" lst > res2!
  assert-that > @
    * (res.length) (res2.length)
    $.equal-to
      list
        * 1 0

[] > multimap-find-do-not-crashed
  multimap * > mp!
  mp.found 1 > res!
  assert-that > @
    res.length
    $.equal-to 0

[] > multimap-find-works
  multimap (* (*) (* (* 4 "a")) (* (* 2 "c") (* 8 "c"))) > mp!
  mp.found 2 > r2!
  mp.found 3 > r3!
  mp.found 4 > r4!
  mp.found 8 > r8!
  assert-that > @
    * (r2.at 0) (r3.length) (r4.at 0) (r8.at 0)
    $.equal-to
      list
        * "c" 0 "a" "c"

[] > multimap-find-and-with
  nop > @
    multimap * > init-mp!
    init-mp.with 1 2 > mp!
    assert-that
      ((mp.found 1).at 0)
      $.equal-to 2

[] > multimap-of-multimap
  multimap * > init-mp!
  init-mp.with "c" "d" > mp1!
  init-mp.with 1 mp1 > mp-res!
  nop > @
    ((((mp-res.found 1).at 0).found "c").at 0)
    $.equal-to "d"

[] > multimap-without-works-3
  multimap (* (* (* 3 "a"))) > mp!
  mp.without 3 > mp2!
  assert-that > @
    mp2.size
    $.equal-to 0

[] > multimap-without-works-4
  multimap (* (* (* 3 "a"))) > mp!
  mp.without 1 > mp2!
  assert-that > @
    mp2.size
    $.equal-to 1

[] > multimap-without-many-elements
  nop > @
    multimap * > init-mp!
    ((init-mp.with 1 "a").with 2 "b").with 1 "c" > mp!
    mp.without 1 > mp2!
    assert-that
      mp2.size
      $.equal-to 1

[] > map-key-does-not-found
  (multimap *) > mp!
  assert-that > @
    (mp.found "key123").length
    $.equal-to 0

[] > collision-test
  TRUE > a!
  1231 > b!
  assert-that > @
    a.as-hash
    $.equal-to (b.as-hash)

[] > multimap-keys-test
  nop > @
    ((multimap *).with 11 "a").with 5 "b" > mp!
    assert-that
      times.
        ((mp.keys).at 0)
        ((mp.keys).at 1)
      $.equal-to 55

[] > comparable-pair-correctness
  multimap.rebuilded.comparable-pair (* 0 "") > p1!
  multimap.rebuilded.comparable-pair (* 2 TRUE) > p2!
  assert-that > @
    lt.
      p1
      p2
    $.equal-to TRUE

[] > comparable-pair-correctness-2
  multimap.rebuilded.comparable-pair (* 42 -42) > p1!
  multimap.rebuilded.comparable-pair (* -2 "") > p2!
  assert-that > @
    lt.
      p1
      p2
    $.equal-to FALSE

[] > create-array-by-hash-correctness
  * (* 0 "a") (* 0 "b") (* 3 "c") > arr!
  multimap.rebuilded.create-array-by-hash arr 0 0 > res!
  assert-that > @
    res
    $.equal-to
      list
        * "a" "b"

[] > create-array-by-hash-correctness-2
  * (* 0 "a") (* 0 "b") (* 3 "c") > arr!
  multimap.rebuilded.create-array-by-hash arr 0 1 > res!
  assert-that > @
    res
    $.equal-to
      list
        * "b"

[] > create-array-by-hash-correctness-3
  * (* 0 "a") (* 3 "b") (* 3 "c") > arr!
  multimap.rebuilded.create-array-by-hash arr 3 1 > res!
  assert-that > @
    res
    $.equal-to
      list
        * "b" "c"

[] > array-filling-to-size-correctness
  * > arr!
  multimap.rebuilded.fill-to-size arr 0 > res!
  assert-that > @
    res
    $.equal-to
      list
        *

[] > array-filling-to-size-correctness-2
  * > arr!
  multimap.rebuilded.fill-to-size arr 2 > res!
  assert-that > @
    res
    $.equal-to
      list
        * (list *) (list *)

[] > array-filling-to-size-correctness-3
  * 0 > arr!
  multimap.rebuilded.fill-to-size arr 2 > res!
  assert-that > @
    res
    $.equal-to
      list
        * 0 (list *)

[] > hash-table-sorting
  * 2 3 > arr!
  * 0 1 > harr!
  mappedi. > wrapped-pairs!
    list
      arr
    [x i]
      mod. > new-index!
        QQ.math.number
          harr.at i
        arr.length
      (multimap.rebuilded.comparable-pair) (* new-index x) > @
  sorted. > sorted-pairs!
    list
      wrapped-pairs
  assert-that > @
    wrapped-pairs
    $.equal-to
      list
        *
          list (* 0 2)
          list (* 1 3)

[] > rebuilded-do-not-crush
  nop > @
    * 1 2 > harr!
    * 3 4 > arr!
    multimap.rebuilded harr arr > res!
    assert-that
      res.length
      $.equal-to 2

[] > rebuilded-correct
  nop > @
    * 1 0 3 0 > harr!
    * (* 1 "a") (* 4 "b") (* "c" 5) (* 8 7) > arr!
    multimap.rebuilded harr arr > res!
    assert-that
      * (((res.at 0).at 0).at 0) (((res.at 3).at 0).at 1)
      $.equal-to
        list
          * 4 5
