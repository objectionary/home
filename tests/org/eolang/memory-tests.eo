# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.36.0

# Test.
[] > writes-into-memory
  (memory 0).alloc > x
  seq > @
    *
      x.write 10
      and.
        x.eq 10
        x.free

# Test.
[] > memory-double-writes
  (memory "1234567890123").alloc > m
  and. > @
    eq.
      42.as-bytes.concat
        "orld!".as-bytes
      seq
        *
          m.write "Hello, world!"
          m.write 42
          m
    m.free

# Test.
[] > rewrites-and-increments-itself
  (memory 0).alloc > m
  seq > @
    *
      m.write 1
      m.write (m.as-int.plus 5)
      (m.eq 6).and m.free

# Test.
[] > memory-in-outer-scope
  # Outer scope object.
  [] > a
    (memory 0).alloc > x
  seq > @
    *
      a.x.write 1
      not.
        eq.
          a.x.as-int
          1

# Test.
[] > writes-into-two-memory-objects
  (memory 0).alloc > a
  (memory 0).alloc > b
  and. > @
    seq
      *
        a.write 10
        b.write 20
        and.
          b.eq 20
          a.eq 10
    and.
      a.free
      b.free

# Test.
[] > writes-into-two-memory-objects-and-check-first
  (memory 0).alloc > a
  (memory 0).alloc > b
  seq > @
    *
      a.write 10
      b.write 20
      and.
        and.
          a.eq 10
          a.free
        b.free

# Test.
[] > memory-is-strictly-typed-bool-error-overflow
  (memory FALSE).alloc > m
  try > @
    []
      m.write 86124867.88 > @
    [e]
      and. > @
        QQ.io.stdout e
        m.free
    TRUE

# Test.
[] > memory-is-strictly-typed-string-error-overflow
  (memory "Hello").alloc > m
  try > @
    []
      m.write "Much longer string!" > @
    [e]
      and. > @
        QQ.io.stdout e
        m.free
    TRUE

# Test.
[] > memory-is-strictly-typed-int
  (memory 12248).alloc > m
  and. > @
    eq.
      try
        []
          m.write 2556 > @
        [e]
          e > @
        TRUE
      2556
    m.free

# Test.
[] > memory-is-strictly-typed-float
  (memory 245.88).alloc > m
  and. > @
    eq.
      try
        []
          m.write 82.22 > @
        [e]
          e > @
        TRUE
      82.22
    m.free

# Test.
[] > memory-is-strictly-typed-string
  (memory "Hello").alloc > m
  and. > @
    eq.
      try
        []
          m.write "Prot" > @
        [e]
          e > @
        TRUE
      "Proto"
    m.free

# Test.
[] > memory-is-strictly-typed-bool
  (memory FALSE).alloc > m
  and. > @
    try
      []
        m.write TRUE > @
      [e]
        e > @
      TRUE
    m.free

# Test.
[] > memory-is-cleared-successfully
  (memory FALSE).alloc > m
  seq > @
    *
      m.free
      try
        m
        [e] (QQ.io.stdout e > @)
        FALSE
