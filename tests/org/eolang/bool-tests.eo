# The MIT License (MIT)
#
# Copyright (c) 2016-2023 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.32.0

[] > compares-two-bools
  eq. > @
    TRUE
    TRUE

[] > compares-two-different-types
  not. > @
    eq.
      TRUE
      42

[] > joins-many-ands
  and. > @
    TRUE
    5.lt 10
    4.gt -6
    TRUE
    0.eq 0

[] > forks-on-condition
  eq. > @
    if.
      5.eq 8
      123
      42
    42

[] > iterates-over-simple-counter
  memory 0 > x
  and. > @
    eq.
      x.write 5
      5
    eq.
      while.
        x.as-int.lt 10
        [i]
          x.write > @
            x.as-int.plus 1
      11

# tests that bool.and stops calculations if its i'th
# object is false (including the base object)
[] > and-short-circuiting
  memory 0 > mFirst
  memory 0 > mThird
  and. > res
    not.
      and.
        (mFirst.write 1).eq 100
        (mFirst.write 2).eq 2
        (mFirst.write 3).eq 3
    not.
      and.
        (mThird.write 1).eq 1
        (mThird.write 2).eq 2
        (mThird.write 3).eq 300
        (mThird.write 4).eq 4
    mFirst.eq 1
    mThird.eq 3
  nop > @

# tests that bool.or stops calculations if its i'th
# object is true (including the base object)
[] > or-short-circuiting
  memory 0 > mFirst
  memory 0 > mThird
  and. > @
    or.
      (mFirst.write 1).eq 1
      mFirst.write 2
      mFirst.write 3
    or.
      (mThird.write 1).eq 100
      (mThird.write 2).eq 200
      (mThird.write 3).eq 3
      mThird.write 4
    mFirst.eq 1
    mThird.eq 3

[] > compares-bool-to-bytes
  and. > @
    TRUE.eq 01-
    FALSE.eq 00-

[] > compares-bool-to-string
  and. > @
    TRUE.eq "\001"
    FALSE.eq "\000"

[] > compares-bool-to-bytes-reverse
  and. > @
    01-.as-bytes.eq TRUE
    00-.as-bytes.eq FALSE

[] > complex-bool-expression-in-while
  memory 0 > m
  seq > @
    m.write 5
    while.
      eq.
        m.as-int.gt 0
        TRUE
      [i]
        seq > @
          m.write
            m.as-int.minus 1
          TRUE
    TRUE

[] > last-while-dataization-object
  memory 0 > x
  eq. > @
    while.
      x.as-int.lt 2
      [i]
        seq > @
          x.write (x.as-int.plus 1)
          x.as-int
    3

[] > while-without-last-dataization
  memory 0 > x
  eq. > @
    seq
      while.
        x.as-int.lt 2
        [i]
          x.write (x.as-int.plus 1) > @
      .@
      .<
      x.as-int
    2

[] > last-while-dataization-object-with-false-condition
  memory 3 > x
  eq. > @
    while.
      x.as-int.lt 1
      [i]
        seq > @
          x.write (x.as-int.plus 1)
          x
    FALSE
