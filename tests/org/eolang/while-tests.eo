# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+tests
+package org.eolang
+version 0.36.0

# Test.
[] > simple-while-with-false-first
  while > res
    FALSE
    [i] (TRUE > @)
  (bool res).not > @

# Test.
[] > simple-bool-expression-via-memory-in-while
  (memory TRUE).alloc > condition
  while > res
    condition
    [i] (condition.write FALSE > @)
  and. > @
    (bool res).not
    condition.free

# Test.
[] > last-while-dataization-object
  (memory 0).alloc > x
  and. > @
    eq.
      3
      while
        2.gt x
        [i]
          x.write > @
            x.as-int.plus 1
    x.free

# Test.
[] > iterates-over-simple-counter
  (memory 0).alloc > x
  and. > @
    and.
      eq.
        x.write 5
        5
      eq.
        while
          10.gt x
          [i]
            x.write > @
              x.as-int.plus 1
        11
    x.free

# Test.
[] > last-while-dataization-object-with-false-condition
  (memory 3).alloc > x
  and. > @
    eq.
      while
        1.gt x
        [i] (x.write (x.as-int.plus 1) > @)
      FALSE
    x.free

# Test.
[] > iterating-tuple-with-while-using-internal-iterator
  * 1 1 1 1 > arr
  (memory 0).alloc > iter
  (memory 0).alloc > acc
  arr.length.plus -1 > max
  seq > @
    *
      if
        max.eq 0
        acc.write
          acc.as-int.plus
            arr.at 0
        while
          max.gt iter
          [i]
            seq > @
              *
                acc.write
                  acc.as-int.plus
                    arr.at
                      i
                iter.write
                  iter.as-int.plus 1
      and.
        and.
          eq.
            acc.as-int
            arr.length
          iter.free
        acc.free

# Test.
[] > iterating-tuple-with-while-using-external-iterator
  * 1 1 1 1 > arr
  (memory 0).alloc > iter
  (memory 0).alloc > acc
  arr.length.minus 1 > max
  seq > @
    *
      if
        max.eq 0
        acc.write
          acc.as-int.plus
            arr.at 0
        while
          max.gt iter
          [i]
            seq > @
              *
                acc.write
                  acc.as-int.plus
                    arr.at
                      iter.as-int
                iter.write
                  iter.as-int.plus 1
      and.
        and.
          eq.
            acc.as-int
            arr.length
          iter.free
        acc.free

# Test.
[] > while-with-body-in-condition
  (memory -1).alloc > x
  (memory 0).alloc > i
  seq > @
    *
      while
        []
          if > @
            1.gt x
            seq
              *
                x.write i.as-int
                i.write (i.as-int.plus 1)
                TRUE
            FALSE
        [i]
          TRUE > @
      and.
        and.
          and.
            x.eq 1
            i.eq 2
          x.free
        i.free

# Test.
[] > iterating-tuple-with-while-without-body-multiple
  * 1 1 1 > arr
  (memory 0).alloc > iter
  (memory 0).alloc > acc
  arr.length > max
  seq > @
    *
      while
        []
          if > @
            max.gt iter
            seq
              *
                acc.write
                  acc.as-int.plus
                    arr.at
                      iter.as-int
                iter.write
                  iter.as-int.plus 1
                TRUE
            FALSE
        [i]
          TRUE > @
      and.
        and.
          eq.
            acc.as-int
            arr.length
          iter.free
        acc.free

# Test.
[] > iterating-tuple-with-while-without-body-single
  * 1 > arr
  (memory 0).alloc > iter
  (memory 0).alloc > acc
  arr.length > max
  seq > @
    *
      while
        []
          if > @
            max.gt iter
            seq
              *
                acc.write
                  acc.as-int.plus
                    arr.at
                      iter.as-int
                iter.write
                  iter.as-int.plus 1
                TRUE
            FALSE
        [i]
          TRUE > @
      and.
        and.
          eq.
            acc.as-int
            arr.length
          iter.free
        acc.free
