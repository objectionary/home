# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.36.0
+version 0.36.0

# Allocates a block in memory of `size` bytes.
# You can use it like:
# ```
# (malloc 8).pointer > p
# seq
#   *
#     p.write 0 42 # write 8 bytes integer with offset 0
#     p.read       # read from memory, 42 will be returned
#     p.free       # free allocated block
# ```
# Clearing the block is optional and is up to programmer.
[size] > malloc
  @.pointer > pointer

  # Allocates a memory block in RAM and returns pointer to it.
  [] > @ /memory-block-pointer

  # Pointer to allocated block in memory.
  # Here `id` is identifier of pointer, `size` is length of the block.
  [id] > memory-block-pointer
    $ > pointer
    ^.size > size

    # Read `length` bytes from `offset` from the block in memory by the pointer.
    [offset length] > read /bytes

    # Write `data` from `offset` to the block in memory by the pointer.
    [offset data] > write /true

    # Free the block in memory by the pointer.
    [] > free /true
