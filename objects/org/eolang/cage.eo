# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.40.0
+rt node eo2js-runtime:0.0.0
+version 0.40.0

# This object is doing exactly the same as `memory`, but allows
# to store objects, not only data. In other words, it doesn't
# do dataization when objects are being stored. Also, when the
# encaged object is retrieved, not the bytes gets out, but the
# object that was put there.
#
# The `cage` object is considered a bad practice in EO and most
# probably will be removed in the next versions of the language.
# It is not recommended to use it, unless for debugging and
# transition purposes (from another language to EO).
[object] > cage
  @.self > new

  # Object encaged for the first time.
  [] > @ /encaged

  # Object encaged by locator.
  [locator] > encaged
    $ > self
    [] > @ /?

    # Encage new object by locator.
    [object] > encage /true
