# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.sys.posix
+alias org.eolang.sys.os
+alias org.eolang.txt.sprintf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang.net
+rt jvm org.eolang:eo-runtime:0.39.1
+rt node eo2js-runtime:0.0.0
+version 0.39.1

# Socket.
[address port] > socket
  if. > @
    os.is-windows
    win-socket address port
    posix-socket address port

  # Host TO Network Short.
  # It is used to convert a `number` port from host byte order to
  # to `i16` in network byte order (big-endian).
  # This conversion is necessary because network protocols like TCP/IP use
  # big-endian byte order, regardless of the host machine's architecture.
  [port] > htons
    port.as-i16.as-bytes > bts
    as-i16. > @
      or.
        (bts.and FF-).left 8
        (bts.right 8).and FF-

  [address port] > posix-socket
    [scope] > connect
      code. > sd
        posix
          "socket"
          * posix.af-inet posix.sock-stream posix.ipproto-tcp
      code. > inet-addr
        posix
          "inet_addr"
          * ^.address
      if. > inet-addr-as-int
        inet-addr.eq posix.inaddr-none
        error
          sprintf
            "Couldn't convert an IPv4 address '%s' into a 32-bit integer via 'inet_addr' posix syscall, reason: '%s'"
            * ^.address strerror
        inet-addr.as-i32
      posix.sockaddr-in > sockaddr
        posix.af-inet.as-i16
        ^.^.htons port
        inet-addr-as-int
      code. > connected
        posix
          "connect"
          * sd sockaddr sockaddr.size
      code. > closed
        posix
          "close"
          * sd
      code. > strerror
        posix
          "strerror"
          * (posix "errno" *).code
      if. > @
        sd.eq -1
        error
          sprintf
            "Couldn't create a posix socket, reason: '%s'"
            * strerror
        try
          if.
            connected.eq -1
            error
              sprintf
                "Couldn't connect to '%s:%d' on posix socket '%d', reason: '%s'"
                * ^.address ^.port sd strerror
            as-bytes.
              dataized
                scope
                  ^.scoped-posix-socket sd
          ex > [ex]
          if.
            closed.eq -1
            error
              sprintf
                "Couldn't close a posix socket '%d' connected to '%s:%d'"
                * sd ^.address ^.port
            true

    [descriptor] > scoped-posix-socket

  [address port] > win-socket
