# The MIT License (MIT)
#
# Copyright (c) 2021-2022 Max Trunnikov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.math.angle
+alias org.eolang.math.pi
+alias org.eolang.nan
+alias org.eolang.negative-infinity
+alias org.eolang.positive-infinity
+alias org.eolang.switch
+home https://github.com/objectionary/eo-math
+package org.eolang.math
+rt jvm org.eolang:eo-math:0.4.1
+version 0.4.1

[n] > number
  n > @

  # Checking type of the number's decorator.
  # If $.n is int, return true, otherwise false.
  [] > is-int
    ^.n > value!
    if. > @
      value.eq 0
      TRUE
      if.
        value.eq 0.0
        FALSE
        eq.
          div.
            value
            value
          1

  # Checking type of the number's decorator.
  # If $.n is float, return true, otherwise false.
  [] > is-float
    ^.n > value!
    if. > @
      value.eq 0.0
      TRUE
      if.
        value.eq 0
        FALSE
        eq.
          div.
            value
            value
          1.0

  # Checking if number is NaN
  [] > is-nan
    not. > @
      eq.
        ^.n
        ^.n

  # Checking if number is infinite
  [] > is-infinite
    or. > @
      eq.
        ^.n > value!
        positive-infinity
      eq.
        value
        negative-infinity

  [x] > xor
    if. > @
      is-int
      as-int.
        xor.
          ^.n.as-bytes
          x.as-bytes
      error "xor cannot be applied to float"

  [x] > or
    if. > @
      is-int
      as-int.
        or.
          ^.n.as-bytes
          x.as-bytes
      error "or cannot be applied to float"

  [x] > and
    if. > @
      is-int
      as-int.
        and.
          ^.n.as-bytes
          x.as-bytes
      error "and cannot be applied to float"

  # Calculate bitwise left shift
  [x] > left
    if. > @
      is-int
      as-int.
        left.
          ^.n.as-bytes
          x
      error "left cannot be applied to float"

  # Calculate bitwise right shift
  [x] > right
    if. > @
      is-int
      as-int.
        right.
          ^.n.as-bytes
          x
      error "right cannot be applied to float"

  # Tests that $.n â‰  x
  [x] > neq
    (^.n.eq x).not > @

  # Calculate MOD
  [x] > mod
    ^.n > dividend!
    x > divisor!

    if. > @
      divisor.eq 0
      error "mod by zero"
      if.
        dividend.gt 0
        abs-mod
        neg.
          abs-mod

    [] > abs-mod
      (number dividend).abs > int-abs!
      (number divisor).abs > x-abs!
      minus. > @
        int-abs
        x-abs.times
          int-abs.div x-abs

  # Absolute value of $.n (i.e., with no sign)
  [] > abs
    ^.n > value!
    if. > @
      is-int
      if.
        value.gte 0
        value
        value.neg
      if.
        value.gte 0.0
        value
        value.neg

  # Round ^.n up
  [] > ceil
    ^.n > value!
    if. > @
      or.
        is-nan
        is-int
        eq.
          value
          positive-infinity
        eq.
          value
          negative-infinity
      value
      []
        as-int > self-as-int!
        if. > @
          value.lte 0.0
          self-as-int
          self-as-int.plus 1

  # Make ^.n power x
  [x] > pow /number

  # Make ^.n power x
  # @todo #21:30 min. Add an ability to raise a number to float power.
  #  `exp` and `ln` objects are needed.  sqr(n,x) = exp(n * ln(x))
  [x] > power
    if. > @
      or.
        is-nan.
          number x > x-as-num!
        is-nan
      nan
      []
        if. > x-as-float!
          x-as-num.is-infinite > x-is-inf!
          x
          if.
            x-as-num.is-int > x-is-int!
            x-as-num.as-float
            x

        if. > self-as-float!
          is-infinite > self-is-inf!
          ^.^.n > value!
          if.
            is-int > self-is-int!
            as-float
            value

        and. > both-are-int!
          x-is-int
          self-is-int

        [n p] > bin-powi
          if. > @
            p.eq 0
            1
            []
              bin-powi > res!
                n
                p.div 2

              res.times res > res-x-res!

              if. > @
                eq.
                  mod.
                    number p
                    2
                  1
                res-x-res.times n
                res-x-res

        [n p] > bin-powf
          if. > @
            p.eq 0.0
            1.0
            []
              bin-powf > res!
                n
                as-float.
                  number
                    as-int.
                      number
                        div.
                          p
                          2.0

              res.times res > res-x-res!

              if. > @
                eq.
                  mod.
                    number
                      (number p).as-int
                    2
                  1
                res-x-res.times n
                res-x-res

        switch > @
          *
            x-as-float.eq 0.0
            if.
              both-are-int
              1
              1.0
          *
            x-as-float.lt 0.0
            if.
              self-as-float.eq 0.0 > self-is-zero!
              positive-infinity
              if.
                or. > self-or-x-is-inf!
                  self-is-inf
                  x-is-inf
                0.0
                div.
                  1.0
                  bin-powf
                    self-as-float
                    neg.
                      x-as-float
          *
            x-as-float.gt 0.0
            if.
              self-is-zero
              if.
                both-are-int
                0
                0.0
              switch
                *
                  and.
                    self-as-float.lt 0.0
                    x-is-inf
                  nan
                *
                  and.
                    self-as-float.gt 0.0
                    self-or-x-is-inf
                  positive-infinity
                *
                  and.
                    self-as-float.eq negative-infinity
                    x-is-inf.not
                  if.
                    x-is-int.not
                    positive-infinity
                    if.
                      eq.
                        mod.
                          x-as-num
                          2
                        0
                      positive-infinity
                      negative-infinity
                *
                  TRUE
                  if.
                    both-are-int
                    bin-powi value x
                    bin-powf self-as-float x-as-float

  # @todo #89:90 min. Implement sqrt without using number.pow.
  #  We need it because pow is atom and supposed to be removed.
  #  You can use Heron's iterative formula with a quite good
  #  convergence rate.
  #
  # @todo #105:30min. Fix sqrt and its tests. Since new declarative "while" was
  #  introduced current implementation of sqrt is not relevant anymore. Need
  #  to remake it and unwrap tests
  [] > sqrt
    as-float > value!
    number > @
      switch
        *
          is-nan
          nan
        *
          eq.
            positive-infinity
            n
          positive-infinity
        *
          eq.
            negative-infinity
            n
          nan
        *
          lt.
            n
            n.minus n
          nan
        *
          TRUE
          babylonian-method
            value
    [a] > babylonian-method
      memory 1.0 > x-new
      memory 0.0 > x-old
      memory 1.0 > diff
      seq > @
        while.
          gt.
            diff
            1.0e-15
          [i]
            seq > @
              x-old.write
                x-new
              x-new.write
                times.
                  0.5
                  plus.
                    div.
                      a
                      x-old
                    x-old
              diff.write
                abs.
                  number
                    x-new.minus x-old
        x-new

  # Converts ^.n to float
  [] > as-float /float

  # Converts this to int
  [] > as-int /int

  # Converts ^.n to string
  [] > as-string /string

  # Sign of $ (-1, 0, or 1) if $ is int
  # or (-1.0, 0.0, or 1.0) if $ is float
  [] > signum
    if. > @
      is-int
      if.
        ^.n.lt 0
        -1
        if.
          ^.n.eq 0
          0
          1
      if.
        ^.n.lt 0.0
        -1.0
        if.
          ^.n.eq 0.0
          0.0
          1.0

  # @todo #56:90 min. Implement sin using this taylor object.
  #  You need to code function for coefficient of nth term.
  #  Accuracy can be decreased because of stack limitation.
  #
  # @todo #56:90 min. Implement cos using this taylor object.
  #  You need to code function for coefficient of nth term.
  #  Accuracy can be decreased because of stack limitation.
  #
  # @todo #56:90 min. Implement tg using this taylor object.
  #  You need to code function for coefficient of nth term.
  #  Accuracy can be decreased because of stack limitation.
  [] > exp
    switch > @
      *
        is-nan
        nan
      *
        eq.
          positive-infinity
          n
        number
          positive-infinity
      *
        eq.
          negative-infinity
          n
        0.0
      *
        TRUE
        times.
          exp-x0
          exp-x1
    as-float > value!
    0.69314718055994530941 > ln-2!
    as-int. > m!
      number
        div.
          value
          number.exp.ln-2
    15000000.0 > count!
    pow. > exp-x0!
      number 2.0
      (number m).as-float
    pow. > exp-x1!
      number
        plus.
          1.0
          div.
            minus.
              value
              times.
                (number m).as-float
                ln-2
            count
      count

  # Computes series buy the numbers for start and finish and function of
  # coefficient of nth term. It is NaN if infinity passed because the
  # implementation would get infinity time to calculate sum of infinity terms
  # @todo #105:30min. Fix taylor and its tests. Since new declarative "while"
  #  was introduced current implementation of taylor is not relevant anymore.
  #  Need to remake it and unwrap tests
  [start finish f] > taylor
    ^.n > value!
    memory start > iterator
    memory > product
      value.minus value
    memory > current-power
      power start
    number > distance!
      finish.minus start
    if. > @
      or.
        is-nan
        is-infinite
        distance.is-nan
        distance.is-infinite
      nan
      while.
        lt.
          iterator
          finish
        [i]
          seq > @
            iterator.write
              iterator.plus 1
            product.write
              plus.
                product
                times.
                  f
                    i
                  current-power
            current-power.write
              current-power.times value
            product

  # Take logarithm of ^.n
  # @todo #53:30min. Remove unnecessary checks and move some of them to ln
  #  when ln is implemented in EO and Double.NaN, Double.POSITIVE_INFINITY,
  #  Double.NEGATIVE_INFINITY are converted to eolang objects.
  [base] > log
    number base > base-as-number!

    if. > @
      or.
        is-nan
        base-as-number.is-nan
      nan
      []
        if. > base-as-float!
          base-as-number.is-infinite
          base
          base-as-number.as-float

        if. > self-as-float!
          is-infinite
          ^.^.n
          as-float

        switch > @
          *
            or.
              self-as-float.lt 0.0
              base-as-float.lt 0.0
              and.
                eq. > self-is-inf!
                  positive-infinity
                  self-as-float
                or. > base-is-inf-or-zero!
                  positive-infinity.eq base-as-float
                  base-as-float.eq 0.0
              and.
                self-as-float.eq 0.0 > self-is-zero!
                base-is-inf-or-zero
              and.
                self-as-float.eq 1.0 > self-is-one!
                base-as-float.eq 1.0 > base-is-one!
            nan
          *
            and.
              self-is-inf
              base-is-one
            positive-infinity
          *
            and.
              self-is-zero
              base-is-one
            negative-infinity
          *
            and.
              self-is-one
              base-is-inf-or-zero
            0.0
          *
            TRUE
            div.
              (number self-as-float).ln
              (number base-as-float).ln

  # Natural logarithm of ^.n
  # @todo #105:30min. Fix "ln" and its tests. Since new declarative "while"
  #  was introduced current implementation of "ln" is not relevant anymore.
  #  Need to remake it and unwrap tests
  [] > ln
    as-float > value!
    number > @
      switch
        *
          is-nan
          nan
        *
          eq.
            positive-infinity
            n
          positive-infinity
        *
          eq.
            negative-infinity
            n
          nan
        *
          lt.
            n
            n.minus n
          nan
        *
          eq.
            n
            n.minus n
          negative-infinity
        *
          eq.
            value
            1.0
          0.0
        *
          TRUE
          if.
            gt.
              value
              1.0
            ln-if-greater-than-1
              value
            neg.
              ln-if-greater-than-1
                1.0.div value

    # ln(x) = ln((2^a) * y) = a*ln(2) + ln(y)
    [x] > ln-if-greater-than-1
      plus. > @
        term-1
        term-2
      [] > term-1!
        memory 1.0 > pow-2
        memory 0 > iterator
        seq > @
          while.
            lte.
              pow-2
              x
            [i]
              seq > @
                pow-2.write
                  pow-2.times 2.0
                iterator.write
                  iterator.plus 1
          (x.times 2.0).div pow-2 > y!
          (number (iterator.minus 1)).as-float.times
            number.exp.ln-2

      [] > term-2!
        ln-taylor > @
          minus.
            term-1.y
            1.0
          50

        # ln(1 + t) = t * {1/1 - t[1/2 - t(1/3 -t(1/4 -...))]}
        # terms is numbber of calculating terms in taylor series
        [t terms] > ln-taylor
          memory 0.0 > sum
          memory > iterator
            (number terms).as-float
          seq > @
            while.
              iterator.gt 0.1
              [i]
                seq > @
                  sum.write
                    times.
                      t
                      minus.
                        1.0.div iterator
                        sum
                  iterator.write
                    iterator.minus 1.0
            sum

  # Arccosinus of a n.
  [] > arccos
    [x] > binary-method
      memory > low
        0.0
      memory > high
        pi
      memory > mid
        0.0
      memory > cosmid
        0.0
      0.000000001 > precision!
      memory > running
        TRUE
      seq > @
        while.
          running
          [i]
            seq > @
              mid.write
                div.
                  plus.
                    low
                    high
                  2.0
              cosmid.write
                number
                  angle mid
                  .cos
                .as-float
              if.
                gt.
                  abs.
                    seq
                      minus. > val
                        cosmid
                        x
                      number val
                  precision
                if.
                  gt.
                    cosmid
                    x
                  low.write
                    mid
                  high.write
                    mid
                running.write
                  FALSE
        mid

    if. > @
      or.
        gt.
          n
          1.0
        lt.
          n
          -1.0
      nan
      if.
        eq.
          n
          -1.0
        pi
        if.
          eq.
            n
            0.0
          div.
            pi
            2.0
          if.
            eq.
              n
              1.0
            0.0
            binary-method
              n
