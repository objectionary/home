# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.list
+alias org.eolang.txt.text
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo-strings
+package org.eolang.txt
+rt jvm org.eolang:eo-strings:0.4.0
+version 0.4.0

# Regular expression in Perl format.
# Free attribute "r" is a string represenation of regex object.
# It starts and ends with slash (e.g. "/(your-pattern)/s"),
# Also it can be specified by the flag option,
# e.g. (QQ.txt.regex "/(word)/i").compile.matches "WORD".
# other flags:
# /d - Enables Unix lines mode.
# /i - Enables case-insensitive matching.
# /x - Permits whitespace and comments in pattern.
# /m - Enables multiline mode.
# /s - Enables dotall mode.
# /u - Enables Unicode-aware case folding.
#
[r] > regex
  [] > compile /regex

  # Match the text and return the tuple of matched blocks.
  # Each matched block consists of
  #  - start position in which match was found
  #  - matched string
  #  - tuple of identified matched groups
  [txt] > match /tuple

  # Matches
  [txt] > matches
    not. > @
      is-empty.
        list (^.match txt)

  # A string with all encounters of pattern in txt
  # replaced with rpl
  [txt rpl] > replaced
    # Perform partial replace operation for
    # pt - next unhandled index in text
    # acc - replaced text so far
    # pa - next unhandled index in replaced text
    # m - matched segments tuple
    [pt acc pa m] > replacei
      # Replace groups signs ($i) in old-rpl by the group of
      # the list groups
      [old-rpl groups] > replace-by-groups
        if. > @
          groups.is-empty
          old-rpl
          replace-by-groups
            replaced.
              old-rpl
              chained. > text-chained
                text "\\$"
                QQ.txt.sprintf
                  "%d"
                  minus.
                    groups.length
                    1
              at.
                groups
                minus.
                  groups.length
                  1
            list
              without.
                groups
                minus.
                  groups.length
                  1

      [] > nextpt
        plus. > @!
          mitem.at 0
          length.
            mitem.at 1

      [] > mitem
        m.at 0 > @!

      [] > part
        joined. > @!
          text ""
          *
            slice.
              acc
              0
              pa
            slice.
              txt
              pt
              minus.
                mitem.at 0
                pt
            replace-by-groups
              text rpl
              list
                mitem.at 2

      [] > nextacc
        joined. > @!
          text ""
          *
            part
            slice.
              text txt
              nextpt
              minus.
                txt.length
                nextpt

      if. > @
        not.
          is-empty.
            list m
        ^.replacei
          nextpt
          nextacc
          part.length
          without.
            list m
            0
        acc

    replacei > @
      0
      text txt
      0
      match txt
