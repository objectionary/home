# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.bytes-as-array
+alias org.eolang.collections.list
+alias org.eolang.txt.sscanf
+architect yegor256@gmail.com
+home https://github.com/objectionary/eo-strings
+package org.eolang.txt
+rt jvm org.eolang:eo-strings:0.4.0
+version 0.4.0

[s] > text
  s > @

  [start len] > slice
    text > @
      ^.s.slice start len

  # Returns string trimmed from left side
  [] > left-trim
    left-rec-trim > @
      s

    [str] > left-rec-trim
      if. > @
        eq.
          length.
            str
          0
        ""
        if.
          eq.
            slice.
              str
              0
              1
            " "
          left-rec-trim
            slice.
              str
              1
              plus.
                length.
                  str
                -1
          str

  # Trim it from both sides
  [] > trimmed
    rec-trim > @
      s

    [str] > rec-trim
      str > const-str!
      eq. > empty
        length.
          const-str
        0
      eq. > starts-with-space
        slice.
          const-str
          0
          1
        " "
      eq. > ends-with-space
        slice.
          const-str
          plus.
            length.
              const-str
            -1
          1
        " "

      if. > @
        empty
        ""
        if.
          starts-with-space
          rec-trim
            slice
              1
              plus.
                length.
                  const-str
                -1
          if.
            ends-with-space
            rec-trim
              slice
                0
                plus.
                  length.
                    const-str
                  -1
            const-str

  # Joins an tuple of strings, using current string
  # as a delimiter
  [items] > joined
    reducedi. > res!
      list
        items
      "".as-bytes
      [acc i x]
        if. > @
          i.eq (items.length.minus 1)
          acc.concat x.as-bytes
          (acc.concat x.as-bytes).concat s.as-bytes
    res.as-string > @

  # Returns string repeated n times
  [n] > repeated
    rec-repeated > @
      s
      n

    [str n] > rec-repeated
      if. > @
        eq.
          n
          0
        ""
        chained.
          text
            str
          rec-repeated
            str
            minus.
              n
              1

  # Checks that string contains substr
  [substr] > contains
    substr.length > len!
    s.length > s-len!
    memory 0 > start
    memory FALSE > res
    [] > loop
      while. > @
        and.
          start.lt s-len
          lte.
            start.plus len
            s-len
        [i]
          if. > @
            lte.
              start.plus len
              s-len
            if.
              eq.
                s.slice start len
                substr
              seq
                res.write TRUE
                start.write s-len
              start.write (start.plus 1)
            FALSE
    seq > @
      loop
      res

  # Checks that string ends with substr
  [substr] > ends-with
    index-of.check-if-starts-from-index > @
      s
      substr
      minus.
        s.length
        substr.length

  # Checks that the text starts with substr
  [substr] > starts-with
    index-of.check-if-starts-from-index > @
      s
      substr
      0

  # Returns index of substr in string,
  # if no element was found, it returns -1
  [substr] > index-of
    bytes-as-array > bytes-view!
      as-bytes.
        s
    reducedi. > @
      list
        bytes-view
      -1
      [a i x]
        check-if-starts-from-index > res!
          s
          substr
          i
        if. > @
          eq.
            a
            -1
          if.
            res
            i
            a
          a

    # Method accepts a string and a substring as an array of bytes
    # and checks if the string contains a substring in the passed position
    [str substr index] > check-if-starts-from-index
      str.length > lstr!
      substr.length > lsub!
      if. > @
        gt.
          plus.
            index
            lsub
          lstr
        FALSE
        eq.
          substr
          slice.
            str
            index
            lsub

  # Returns text in lower case
  [] > low-cased
    up-cased.ascii "Z" > ascii-z!
    up-cased.ascii "A" > ascii-a!
    text > @
      as-string.
        reduced.
          list
            bytes-as-array
              s.as-bytes
          --
          [a x]
            up-cased.ascii x > ascii-x!
            concat. > @
              a
              if.
                and.
                  lte.
                    ascii-x
                    ascii-z
                  gte.
                    ascii-x
                    ascii-a
                slice.
                  as-bytes.
                    plus.
                      up-cased.ascii
                        x
                      up-cased.distance
                  7
                  1
                x

  # Returns last index of substr in string,
  # if no element was found, it returns -1
  [substr] > last-index-of
    bytes-as-array > bytes-view!
      as-bytes.
        s
    reducedi. > @
      list
        bytes-view
      -1
      [a i x]
        index-of.check-if-starts-from-index > res!
          s
          substr
          i
        if. > @
          res
          i
          a

  # Returns text in upper case
  [] > up-cased
    ascii "z" > ascii-z!
    ascii "a" > ascii-a!
    text > @
      as-string.
        reduced.
          list
            bytes-as-array
              s.as-bytes
          --
          [a x]
            ascii x > ascii-x!
            concat. > @
              a
              if.
                and.
                  lte.
                    ascii-x
                    ascii-z
                  gte.
                    ascii-x
                    ascii-a
                slice.
                  as-bytes.
                    minus.
                      ascii
                        x
                      distance
                  7
                  1
                x

    [c] > ascii
      as-int. > @
        concat.
          00-00-00-00-00-00-00
          as-bytes.
            c
    minus. > distance!
      ascii
        "a"
      ascii
        "A"

  [i] > at
    ^.slice i 1 > @

  # Returns text where all regexp
  # target changed to replacement
  [target replacement] > replaced /text

  # Returns the text as integer
  [] > as-int
    at. > @
      sscanf
        "%d"
        s
      0

  # Returns the text as float
  [] > as-float
    at. > @
      sscanf
        "%f"
        s
      0

  # Compares two strings in lexicographic order.
  # Returns 0 if two strings are equal,
  # a negative number if the first string comes before the argument,
  # a positive number if the first string comes after the argument
  [other] > compare
    bytes-as-array > b1!
      as-bytes.
        s
    bytes-as-array > b2!
      as-bytes.
        other
    if. > @
      eq.
        length.
          s
        length.
          other
      reducedi.
        list
          b1
        0
        [a i x]
          if. > res!
            eq.
              at.
                b1
                i
              at.
                b2
                i
            0
            if.
              gt.
                as-int.
                  is-alphabetic.bytes-1-to-8
                    at.
                      b1
                      i
                as-int.
                  is-alphabetic.bytes-1-to-8
                    at.
                      b2
                      i
              1
              -1
          if. > @
            eq.
              a
              0
            res
            a
      minus.
        length.
          s
        length.
          other

  # Returns an tuple of strings, separated by a given string
  [delimiter] > split /tuple

  # Check that all signs in string are numbers or letters.
  # Works only for english letters
  [] > is-alphabetic
    reduced. > @
      list
        bytes-as-array
          as-bytes.
            low-cased.
              text
                s
      TRUE
      [a x]
        as-int. > value!
          bytes-1-to-8
            as-bytes.
              x
        and. > @
          a
          int-is-alphabetic
            value

    [b] > int-is-alphabetic
      or. > @
        and.
          gte.
            b
            48
          lte.
            b
            57
        and.
          gte.
            b
            97
          lte.
            b
            122

    [b] > bytes-1-to-8
      concat. > @
        00-00-00-00-00-00-00
        b

  # Check that all signs in string are letters.
  # Works only for english letters
  [] > is-alpha
    reduced. > @
      list
        bytes-as-array
          as-bytes.
            low-cased.
              text
                s
      TRUE
      [a x]
        as-int. > value!
          is-alphabetic.bytes-1-to-8
            as-bytes.
              x
        and. > @
          a
          int-is-alpha
            value

    [b] > int-is-alpha
      and. > @
        gte.
          b
          97
        lte.
          b
          122

    [b] > bytes-1-to-8
      concat. > @
        00-00-00-00-00-00-00
        b

  # Check that all signs in string are ASCII characters.
  [] > is-ascii
    reduced. > @
      list
        bytes-as-array
          as-bytes.
            text
              s
      TRUE
      [a x]
        as-int. > value!
          is-alphabetic.bytes-1-to-8
            as-bytes.
              x
        and. > @
          a
          int-is-ascii
            value

    [b] > int-is-ascii
      and. > @
        gte.
          b
          0
        lte.
          b
          127

  # Returns concatenation of all strings
  [others...] > chained
    text > @
      as-string.
        reduced.
          list
            others
          as-bytes.
            s
          [a x]
            concat. > @
              a
              as-bytes.
                x
