# The MIT License (MIT)
#
#  2016-2022 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+architect yegor256@gmail.com
+home https://github.com/objectionary/eo
+package org.eolang
+rt jvm org.eolang:eo-runtime:0.32.0
+version 0.32.0

[] > float
  # Tests that $ = x
  [x] > eq
    x > value!
    if. > @
      and.
        eq.
          ^.as-bytes > self-as-bytes!
          00-00-00-00-00-00-00-00 > zero-as-bytes!
        eq.
          value.as-bytes > x-as-bytes!
          zero-as-bytes
      eq.
        ^.neg.as-bytes
        value.neg.as-bytes
      eq.
        self-as-bytes
        x-as-bytes

  # Tests that $ < x
  [x] > lt
    gt. > @
      plus.
        neg.
          ^
        x
      0.0

  # Tests that $ â‰¤ x
  [x] > lte
    x > value!
    or. > @
      ^.eq value
      ^.lt value

  # Tests that $ > x
  [x] > gt /bool

  # Tests that $ â‰¥ x
  [x] > gte
    x > value!
    or. > @
      ^.eq value
      ^.gt value

  # Multiplication of $ and x
  [x...] > times /float

  # Sum of $ and x
  [x...] > plus /float

  # Negation of $
  [] > neg
    ^.times -1.0 > @

  # Difference between $ and x
  [x...] > minus
    [acc index terms] > rec-terms
      if. > @
        index.eq terms.length
        acc
        rec-terms
          acc.with
            (terms.at index).neg
          index.plus 1
          terms
    rec-terms > neg-terms
      *
      0
      x
    ^.plus > @
      ...neg-terms

  # Quotient of the division of $ by x
  [x...] > div /float

  # Converts this to bytes
  [] > as-bytes /bytes
