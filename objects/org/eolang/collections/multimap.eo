# MIT License
#
# Copyright (c) 2022 Eugene Darashkevich
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.collections.hash-code-of
+alias org.eolang.collections.list
+alias org.eolang.math.number
+home https://github.com/objectionary/eo-collections
+package org.eolang.collections
+rt jvm org.eolang:eo-collections:0.10.2
+version 0.10.2

[m] > multimap
  memory 0 > elements-amount
  elements-amount.as-int > size

  # Returns list of all keys in multimap
  [] > keys
    ^.concat-all-arrays m > caa!
    mapped. > @
      list
        caa
      [curr]
        curr.at 0 > @

  [arr] > concat-all-arrays
    reduced. > @
      list
        arr
      *
      [a x]
        concat. > @
          list a
          x

  [arr] > pairs-to-hash
    reduced. > @
      list
        arr
      *
      [a x]
        a.with > @
          hash-code-of
            x.at 0

  # Returns the new map with added object
  [key value] > with
    * key value > new-pair!
    ^.concat-all-arrays m > caa!
    caa.with new-pair > arr!
    ^.pairs-to-hash arr > harr!
    ^.rebuilded harr arr > table!
    multimap table > mmp
    seq > @
      mmp.elements-amount.write (arr.length)
      mmp

  [key arr] > find-in-list
    reduced. > @
      list
        arr
      *
      [a x]
        if. > @
          eq.
            key
            x.at 0
          a.with (x.at 1)
          a

  # Returns an array with the found value
  # If no element was found, it returns an empty array
  [key] > found
    number > num!
      hash-code-of key
    if. > @
      eq.
        m.length
        0
      *
      ^.find-in-list key (m.at (num.mod (m.length)))

  [key arr] > without-in-list
    reduced. > @
      list
        arr
      *
      [a x]
        if. > @
          eq.
            key
            x.at 0
          a
          a.with x

  # This method takes list of key-value pairs
  # and their hashes and returns hash table by them
  [harr arr] > rebuilded
    mappedi. > comparable-pairs!
      list
        arr
      [x i]
        mod. > new-index!
          number
            harr.at i
          arr.length
        comparable-pair (* new-index x) > @
    sorted. > sorted-pairs!
      list
        comparable-pairs
    memory 0 > curr-hash
    reducedi. > almost-res!
      list
        sorted-pairs
      *
      [a x i]
        if. > @
          gte.
            x.at 0
            curr-hash.as-int
          seq
            curr-hash.write (x.at 0)
            fill-to-size a curr-hash.as-int > filled-to-size!
            create-array-by-hash sorted-pairs curr-hash.as-int i > curr-hash-added!
            curr-hash.write (curr-hash.as-int.plus 1)
            filled-to-size.with curr-hash-added
          a
    fill-to-size > @
      almost-res
      length.
        sorted-pairs

    [pair] > comparable-pair
      pair > @

      [x] > lt
        lt. > @
          ^.at 0
          x.at 0

    [arr sz] > fill-to-size
      if. > @
        gte.
          arr.length
          sz
        arr
        ^.fill-to-size (arr.with *) sz

    [arr hash from-index] > create-array-by-hash
      reducedi. > @
        list
          arr
        *
        [a x i]
          if. > @
            and.
              gte.
                i
                from-index
              eq.
                x.at 0
                hash
            with.
              a
              x.at 1
            a

  [harr arr] > rebuild /tuple

  # Returns a new map, without elements with the given key
  # Returns the map itself, if there was no item with this key
  [key] > without
    ^.concat-all-arrays m > caa!
    ^.without-in-list key caa > arr!
    ^.pairs-to-hash arr > harr!
    ^.rebuilded harr arr > table!
    multimap table > mmp
    seq > @
      mmp.elements-amount.write (arr.length)
      mmp
